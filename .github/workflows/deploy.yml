name: Deploy Auth Service to AWS ASG

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout del repositorio
        uses: actions/checkout@v2

      - name: üîê Iniciar sesi√≥n en Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: üèóÔ∏è Construir imagen Docker
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:latest .

      - name: üì§ Subir imagen a Docker Hub
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:latest

      - name: üöÄ Actualizar Auto Scaling Group en AWS
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ASG_NAME: ${{ secrets.AWS_ASG_NAME }}
        run: |
          # AWS CLI ya tiene permisos a trav√©s del IAM Role de la instancia EC2

          # Obtener el √∫ltimo Launch Template Version
          LATEST_VERSION=$(aws ec2 describe-launch-template-versions --launch-template-name $AWS_ASG_NAME --query 'LaunchTemplateVersions[-1].VersionNumber' --output text)

          # Crear una nueva versi√≥n del Launch Template con la nueva imagen
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name $AWS_ASG_NAME \
            --source-version $LATEST_VERSION \
            --launch-template-data "{\"ImageId\":\"${{ secrets.DOCKERHUB_USERNAME }}/auth-service:latest\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' --output text)

          # Actualizar el Auto Scaling Group para usar la nueva versi√≥n del Launch Template
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name $AWS_ASG_NAME \
            --launch-template "LaunchTemplateName=$AWS_ASG_NAME,Version=$NEW_VERSION"

          # Reemplazar instancias antiguas
          aws autoscaling start-instance-refresh --auto-scaling-group-name $AWS_ASG_NAME
